################################################################################
#
# RevBayes Example: Bayesian inference of divergence times using molecular and 
#                   morphological data from Pattinson et al. (2015). fossil dates are
#                   the mean ages reported from PaleoDB and other sources.
#
#
# authors: Sebastian Hoehna
#
################################################################################


taxa <- readTaxonData("data/taxa_data.tsv", delimiter=TAB)
D_mol <- readDiscreteCharacterData("data/molecular.nex")
D_morph <- readDiscreteCharacterData("data/morph_binary.nex")


mvi = 0
mni = 0

##############
# Tree model #
##############

# Specify a prior on the diversification and turnover rate
diversification ~ dnUniform(0,10)
diversification.setValue(0.01)
turnover ~ dnUniform(0,10)
turnover.setValue(0.01)

# now transform the diversification and turnover rates into speciation and extinction rates
speciation := diversification + turnover
extinction := turnover

### process time ###
## Uniform prior on process time
root_time ~ dnUnif(62, 5000.0) # oldest fossil is 61 Ma

## The sampling-through-time parameter 
fossil_rate ~ dnUniform(0,10)

## The probability of sampling at the present (rho)
sampling_prob <- 23 / 450 # 23 out of the ~ 450 extant primate species

## the Birth-death distribution ##
psi ~ dnFBDP(startAge=root_time, lambda=speciation, mu=extinction, psi=fossil_rate, rho=sampling_prob, condition="survival", taxa=taxa)

# create some moves that change the stochastic variables
# all moves are sliding proposals but you could use scaling proposals for the rates too
moves[++mvi] = mvSlide(diversification,delta=1,tune=true,weight=1)
moves[++mvi] = mvSlide(turnover,delta=1,tune=true,weight=1)
moves[++mvi] = mvSlide(fossil_rate,delta=1,tune=true,weight=1)
moves[++mvi] = mvSlide(process_time,delta=1,tune=true,weight=1)

moves[++mvi] = mvNarrow(psi, weight=5.0)
moves[++mvi] = mvNNI(psi, weight=1.0)
moves[++mvi] = mvFNPR(psi, weight=3.0)
moves[++mvi] = mvSubtreeScale(psi, weight=3.0)
moves[++mvi] = mvRootTimeSlide(psi, origin=process_time, weight=3.0)
moves[++mvi] = mvNodeTimeSlideUniform(psi, weight=15.0)

#moves[++mvi] = mvCollapseExpandFossilBranch(psi,process_time,weight=10.0)


################################
# Molecular Substitution Model #
################################

# substitution model priors
bf <- v(1,1,1,1)
e <- v(1,1,1,1,1,1)
pi ~ dnDirichlet(bf)
er ~ dnDirichlet(e)

# moves on the substitution process parameters
# first some moves only changing one value of the simplex
moves[++mvi] = mvSimplexElementScale(pi, alpha=10.0, tune=true, weight=2.0)
moves[++mvi] = mvSimplexElementScale(er, alpha=10.0, tune=true, weight=3.0)

# the rate matrix
Q_mol := fnGTR(er,pi)


####################################
# Morphological Substitution Model #
####################################

# the rate matrix
Q_morph <- fnJC(2)


#############################
# Among Site Rate Variation #
#############################

alpha_prior_mean <- ln(2.0)
alpha_prior_sd <- 0.587405
alpha ~ dnLognormal( alpha_prior_mean, alpha_prior_sd )
gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false )

# add moves for the stationary frequencies, exchangeability rates and the shape parameter
moves[++mvi] = mvScale(alpha,weight=2)


#############################
# Strict global clock model #
#############################

#log_mol_clock_rate ~ dnUniform(-4,1)
#mol_clock_rate := 10^log_mol_clock_rate
#
#moves[++mvi] = mvSlide(log_mol_clock_rate, weight=1.0)

mol_clock_rate ~ dnExponential( 100.0)
mol_clock_rate.setValue( 0.01 )

moves[++mvi] = mvScale(mol_clock_rate, weight=1.0)

#log_morph_clock_rate ~ dnUniform(-10,2)
##log_morph_clock_rate.setValue( 7.5 )
#morph_clock_rate := 10^log_morph_clock_rate
#
#moves[++mvi] = mvSlide(log_morph_clock_rate, weight=1.0)

morph_clock_rate ~ dnExponential( 100.0 )

moves[++mvi] = mvScale(morph_clock_rate, weight=1.0)



###################
# PhyloCTMC Model #
###################

seq_mol ~ dnPhyloCTMC(tree=psi, Q=Q_mol, branchRates=mol_clock_rate, siteRates=gamma_rates, type="DNA")
seq_morph ~ dnPhyloCTMC(tree=psi, Q=Q_morph, branchRates=morph_clock_rate, type="Standard")

# attach the data
seq_mol.clamp(D_mol)
seq_morph.clamp(D_morph)





mymodel = model(bf)


monitors[++mni] = mnModel(filename="output/FBDP.log",printgen=10, separator = TAB)
monitors[++mni] = mnFile(filename="output/FBDP.trees",printgen=10, separator = TAB, psi)
monitors[++mni] = mnScreen(printgen=1000, mol_clock_rate, morph_clock_rate, root_time)

 
mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=1000,100)
mymcmc.run(generations=5000)




# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace = readTreeTrace("output/FBDP.trees", treetype="clock")
# and get the summary of the tree trace
#treetrace.summarize()

map_tree = mapTree(treetrace,"output/FBDP.tree")

# you may want to quit RevBayes now
q()

